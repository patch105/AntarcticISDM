---
title: "Data Setup 100m Case Study"
author: "Charlotte Patterson"
format: 
  html:
    embed-resources: true
---

```{r}
#| output: false

# bibliography: references.bib

library(tidyverse)

packages <- c("sf", "terra", "viridis", "here", "ggpubr", "ENMTools", "mgcv", "RColorBrewer")

walk(packages, require, character.only = T)

here::here() 

```



### Load ice-free land & ACBRs

```{r}

ice_free <- st_read(here("Data/Landsat_8_Derived_Outcrop_Dataset_2016.shp"))
ice_free <- st_transform(ice_free, crs = 3031)
ice_freeSPVE <- vect(ice_free)

# Load the Antarctic Conservation Biogeographic Regions, filter to East Antarctica
ACBRS <- st_read(here("Data/ACBRs_v2_2016.shp"), crs = 3031) %>% filter(ACBR_Name == "East Antarctica")
ACBRS_SPVE <- vect(ACBRS)

# Also trim ice-free land to East Antarctica
ice_freeSPVE.EastAnt <- terra::crop(ice_freeSPVE, ACBRS_SPVE)

```

# Downscaling 10 km ERA5-Land variables to 100m
Code adapted from David Clarke ().

Log transform the positive values (since non-Gaussian...?)

# Load 100 m REMA layers
Source: https://data.pgc.umn.edu/elev/dem/setsm/REMA/mosaic/latest/100m/
Original file is not in the EPSG 3031

```{r}

# # Unzip file
# untar("C:/Users/n11222026/rema_mosaic_100m_v2.0_filled_cop30.tar.gz", list = TRUE)
# untar("C:/Users/n11222026/rema_mosaic_100m_v2.0_filled_cop30.tar.gz", exdir = here("Data"))

# Reproject to EPSG 3031
# library(gdalUtilities)
# rema <- gdalwarp(srcfile = here("Data/rema_mosaic_100m_v2.0_filled_cop30_dem.tif"), 
#                  dstfile = here("Data/rema_REPROJ_mosaic_100m_v2.0_filled_cop30_dem.tif"),
#                  r = "bilinear",
#                  t_srs = 'EPSG:3031',
#                  overwrite = T,
#                  tr = c(100, 100))

# Load reprojected file
# rema <- terra::rast(here("Data/rema_REPROJ_mosaic_100m_v2.0_filled_cop30_dem.tif"))
# Load original file
rema <- terra::rast(here("Data/rema_mosaic_100m_v2.0_filled_cop30_dem.tif"))


```

## Trim 100m REMA to extent of East Antarctica
Buffering to ensure that slope / aspect calculations are not affected by edge effects.

```{r}

ACBRS_buffer <- buffer(ACBRS_SPVE, 10000) # 10 km Buffer around East Ant

ACBRS_buffer.proj <- terra::project(ACBRS_buffer, crs(rema))

elev <- terra::crop(rema, ext(ACBRS_buffer.proj))

```

## Calculate slope and aspect

```{r}
# plot(terrain(project(rema, aggregate(rast(rema), 100), by_util = TRUE), "slope"))

# slope <- terrain(elev, 
#                  "slope",
#                  neighbors = 8,
#                  unit = "degrees",
#                  filename = here("Data/REMA_East_Ant_v2_100m_slope.tif"),
#                  overwrite = T)
# 
# aspect <- terrain(elev,
#                   "aspect",
#                   neighbors = 8,
#                   unit = "degrees",
#                   filename = here("Data/REMA_East_Ant_v2_100m_aspect.tif"),
#                   overwrite = T)

slope <- rast(here("Data/REMA_East_Ant_v2_100m_slope.tif"))
aspect <- rast(here("Data/REMA_East_Ant_v2_100m_aspect.tif"))

```
## Combine predictors for spline into raster stack

```{r}

predictors <- c(elev, slope, aspect)
names(predictors) <- c("elev", "slope", "aspect")

```


# Load and prepare 10 km covariates 
Provided by David Clarke.
Downloaded from ERA5-Land. Approximate resolution is 11km.


```{r}

wind <- rast(here("Data/David_ERA5_Land_wind_speed_mean.tif"))
names(wind) <- "wind"
plot(wind)

# Change crs of ERA5-Land to match predictors
# if you don't use `res = ` then the temp is resampled
wind_prj <- terra::project(wind, y = crs(predictors), res = 11000)

# Aggregate predictors to resolution of ERA5-Land variables
predictors_agg <- terra::aggregate(predictors, fact = 110)



```

### Crops variables to East Antarctica

NOTE to check - is there any reason I would want to crop to East Antarctic Ice-Free land here?

I can't think why. Maybe try both?

```{r}

# Crop ERA5-Land variables to extent of East Antarctica 
# Also resample to match extent
wind_prj <- terra::crop(wind_prj, ext(ACBRS_buffer.proj))
wind_prj <- terra::resample(wind_prj, predictors_agg)


# Create single stack and propagate NA values
stck <- c(wind_prj, predictors_agg)
stck <- ENMTools::check.env(stck)


```

## Create data frame of values for GAM

```{r}

coarse_field <- data.frame(long = crds(stck)[,1],
                           lat = crds(stck)[,2],
                           w.speed = as.vector(values(stck[[1]], na.rm = T)),
                           elev = as.vector(values(stck[[2]], na.rm = T)),
                           slope = as.vector(values(stck[[3]], na.rm = T)),
                           aspect = as.vector(values(stck[[4]], na.rm = T)))
                           

coarse_field <- coarse_field %>% 
  mutate(w.speed.sq = w.speed^2)

coarse_field <- coarse_field[, c(1,2,4,5,6,3,7)]
  
```

## Plot histogram of wind speed

```{r}

hist(coarse_field$w.speed)
# hist(log(coarse_field$w.speed))
hist(coarse_field$w.speed^2)

```


## Fit a thin plate regression spline model

```{r}

mod_list <- list()
# 
# nms <- names(coarse_field[,3]) # Names of ERA5-Land variables

# Just for when running just wind
nms <- colnames(coarse_field)[7:8]

for(name in nms){

  kk <- 1000
  runtime <- system.time(tps <- gam(coarse_field[[name]] ~ elev + aspect + slope +
                                      s(long, lat, bs="tp", k = kk),
                                    method = "REML",
                                    data = coarse_field,
                                    family = gaussian()))
  mod_list[[name]] <- tps

}

# NOW RUNNING WITHA GAMMA DISTRIBUTION
 runtime <- system.time(tps <- gam(coarse_field$w.speed ~ elev + aspect + slope +
                                      s(long, lat, bs="tp", k = kk),
                                    method = "REML",
                                    data = coarse_field,
                                    family = Gamma(link = "log")))


```
## Checking the spline

Check if k is large enough
The default is to produce 4 residual plots, some information about the convergence of the smoothness selection optimization, and to run diagnostic tests of whether the basis dimension choises are adequate
Like checking a fitted GLM with two differences:
Firstly, the basis dimensions used for smooth terms need to be checked, to ensure that they are not so small that they force oversmoothing: the defaults are arbitrary. choose.k provides more detail, but the diagnostic tests described below and reported by this function may also help. Secondly, fitting may not always be as robust to violation of the distributional assumptions as would be the case for a regular GLM, so slightly more care may be needed here. In particular, the thoery of quasi-likelihood implies that if the mean variance relationship is OK for a GLM, then other departures from the assumed distribution are not problematic: GAMs can sometimes be more sensitive. For example, un-modelled overdispersion will typically lead to overfit, as the smoothness selection criterion tries to reduce the scale parameter to the one specified. Similarly, it is not clear how sensitive REML and ML smoothness selection will be to deviations from the assumed response dsistribution. For these reasons this routine uses an enhanced residual QQ plot.

This estimate divided by the residual variance is the k-index reported. *The further below 1* this is, the more likely it is that there is missed pattern left in the residuals.

The p-value is computed by simulation: the residuals are randomly re-shuffled k.rep times to obtain the null distribution of the differencing variance estimator, if there is no pattern in the residuals. For models fitted to more than k.sample data, the tests are based of k.sample randomly sampled data. *Low p-values may indicate that the basis dimension, k, has been set too low, especially if the reported edf is close to k',* the maximum possible EDF for the term. Note the disconcerting fact that if the test statistic itself is based on random resampling and the null is true, then the associated p-values will of course vary widely from one replicate to the next. 

Doubling a suspect k and re-fitting is sensible: if the reported edf increases substantially then you may have been missing something in the first fit. Of course p-values can be low for reasons other than a too low k. See choose.k for fuller discussion.

The QQ plot produced is usually created by a call to qq.gam, and plots deviance residuals against approximate theoretical quantilies of the deviance residual distribution, according to the fitted model. If this looks odd then investigate further using qq.gam.

```{r}

map(mod_list, gam.check)

gam.check(mod_list[[3]])
summary(mod_list[[1]])

map(mod_list, function(x) plot(x, pages = 1, residuals = T))

plot(mod_list[[1]], pages = 1, residuals = T)

plot(mod_list[[1]]$fit)

map(mod_list, summary)

# Plot output of mgcv
map(mod_list, function(x) {plot(x, all.terms = T, residual = T, rug = T, pch = 1, cex = 1)})

# Outputs from Gamma model
gam.check(tps)
plot(tps, pages = 1, residuals = T)


```
## Plot the residuals

```{r}

myPalette <- colorRampPalette(rev(brewer.pal(11, "Spectral")))

map(mod_list, function(x) {
  
  resid <- data.frame(lon = coarse_field$long,
                    lat = coarse_field$lat,
                    res = x$residuals)

ggplot(data = resid, aes(x = lon, y = lat, fill = res)) +
  geom_raster(interpolate = T) +
  scale_fill_gradientn(colours = myPalette(100)) +
  labs(fill = "", x = "Easting", y = "Northing") + #, title = "Coarse Field") +
  theme_bw()
} 
  
  )

resid <- data.frame(lon = coarse_field$long,
                    lat = coarse_field$lat,
                    res = mod_list[[1]]$residuals)

ggplot(data = resid, aes(x = lon, y = lat, fill = res)) +
  geom_raster(interpolate = T) +
  scale_fill_gradientn(colours = myPalette(100)) +
  labs(fill = "", x = "Easting", y = "Northing") + #, title = "Coarse Field") +
  theme_bw()


```

## Create dataframe of values for the GAM prediction

```{r}
# Reproject ice_freeSPVE
ice_freeSPVE.proj <- terra::project(ice_freeSPVE, crs(rema))

# Trim prediction grid to ice-free land
predictors.icefree <- terra::mask(predictors, ice_freeSPVE.proj)

# Set all predictors to NA if NA in any
predictors.icefree <- ENMTools::check.env(predictors.icefree)

fine_grid <- data.frame(long = crds(predictors.icefree)[,1],
                        lat = crds(predictors.icefree)[,2],
                        elev = as.vector(values(predictors.icefree[[1]], na.rm = T)),
                        slope = as.vector(values(predictors.icefree[[2]], na.rm = T)),
                        aspect = as.vector(values(predictors.icefree[[3]], na.rm = T)))


```

## Predict at 100 m resolution and create raster layer

```{r}

downscale <- function(mod_list, fine_grid, to_disk, rast_path){

  pred_list <- list()

  for(i in 1:length(mod_list)){

    print(paste("Downscaling", names(mod_list[i])))

    predtime <- system.time(pred <- predict(mod_list[[i]], fine_grid, se.fit = T))

    fine_field <- data.frame(long = fine_grid$long,
                             lat = fine_grid$lat,
                             zz = pred$fit,
                             se = pred$se.fit)

    pred_list[[i]] <- fine_field



    if(to_disk == TRUE){

      print(paste("writing", names(mod_list[i]), "raster to disk"))

      ras <- rast(pred_list[[i]],
                  type = "xyz",
                  crs = crs(predictors.icefree))

      writeRaster(ras,
                  here(rast_path,
                       paste0("mean_",names(mod_list)[i],"_100.tif")),
                  overwrite = T)
    }
  }

  return(pred_list)
}


#Create downscaled predictions
predictions <- downscale(mod_list = mod_list,
                         fine_grid = fine_grid,
                         to_disk = T,
                         rast_path = here("Case_Study/Downscaled_vars/"))



```

### Create additional variables for modelling
Topographic Wetness Index (TWI), mean summer temperature (AntAir_summer_mean_resamp.tif), and distance to nearest vertebrate colony? 

```{r}

```

predictors.icefree


### REPROJECT PREDICTORS TO EPSG 3031

```{r}

rm(predictors)
rm(ice_freeSPVE)
rm(ice_free)
rm(ice_freeSPVE.proj)
rm(elev)
rm(aspect)
rm(slope)
rm(rema)
gc()


predictors.icefree <- terra::project(predictors.icefree, "EPSG:3031")


```


### Trim predictors to Bunger and Vestfold Hills 

```{r}

# Load Vestfold Hills polygon
Vestfold.landsat <- st_read(here("Data/Vestfold_Landsat_Polygon.shp")) %>% 
  st_transform(3031) %>% 
  vect()

# Load Bunger Hills polygon
Bunger.landsat <- st_read(here("Data/Bunger_Landsat_Polygon.shp")) %>% 
  st_transform(3031) %>% 
  vect()

predictors.icefree.Bunger <- terra::mask(predictors.icefree, Bunger.landsat)
predictors.icefree.Bunger.crop <- terra::crop(predictors.icefree.Bunger, ext(Bunger.landsat))

predictors.icefree.Vestfold <-terra::mask(predictors.icefree, Vestfold.landsat)
predictors.icefree.Vestfold.crop <- terra::crop(predictors.icefree.Vestfold, ext(Vestfold.landsat))

```



### Plot 100m Vars

::: {.panel-tabset}

### Bunger Hills

```{r}

predictors.icefree.Bunger.crop[[1]] %>%
  as.data.frame(xy = T) %>%
  ggplot() +
  geom_tile(aes(x = x, y = y, fill = elev)) +
  scale_fill_viridis() +
  theme_bw()

```
### Vestfold Hills

```{r}

predictors.icefree.Vestfold.crop[[1]] %>%
  as.data.frame(xy = T) %>%
  ggplot() +
  geom_tile(aes(x = x, y = y, fill = elev)) +
  scale_fill_viridis() +
  theme_bw()

```

:::

# Load biodiversity data

First we load the presence-only data. From both the SCAR Biodiversity Database and GBIF.

```{r}

# Load SCAR Biodiversity Database
Ant_biodf <- read.csv(here("Data/SCAR_Ant_Terr_Bio_DataBase_MASTER_16-11-2023.csv"), header = T)

Ant_bio <- st_as_sf(Ant_biodf, 
                    coords = c("decimalLongitude", "decimalLatitude"), 
                    crs = 4326) %>% 
  filter(class %in% c("Lecanoromycetes", "Lichinomycetes", "Arthonionmycetes", "Leotiomycetes", "Dothideomycetes",
                      "Bryopsida",
                      "Andreaeopsida"))

# Removed PTM that identified non-lichenised fungi
Ant_bio <- Ant_bio %>% 
 filter(!PTM_ID %in% c("?", "29", "26 & 29", "75")) %>% 
  dplyr::select(scientificName, class, order, family, genus, coordinateUncertaintyInMetres)

Ant_bio <- st_transform(Ant_bio, 3031) #project to WGS_1984 Antarctic Polar Stereographic

# Load GBIF data
GBIF_df <- read.csv(here("Data/GBIF_Lichen_Moss.csv"), header = T)

GBIF_sf <- st_as_sf(GBIF_df, 
                    coords = c("x", "y"), 
                    crs = 3031) %>% 
  dplyr::select(scientificNameClean, class, order, familyClean, genusClean, coordinateUncertaintyInMeters) %>% 
  rename(coordinateUncertaintyInMetres = coordinateUncertaintyInMeters, 
         family = familyClean, 
         genus = genusClean,
         scientificName = scientificNameClean)

# Combine datasets
SCAR_GBIF_bio.vect <- vect(rbind(Ant_bio, GBIF_sf))


```

### Mask presence-only records by ice-free land
Bunger Hills, Vestfold Hills, East Antarctica

Make presence-only data that excludes Bunger Hills

```{r}

bio_east_ant_df <- terra::mask(SCAR_GBIF_bio.vect, ice_freeSPVE.EastAnt) %>% as.data.frame(geom = "XY")
bio_east_ant_sf <- terra::mask(SCAR_GBIF_bio.vect, ice_freeSPVE.EastAnt) %>% st_as_sf()

# bio_vestfold_df <- terra::crop(SCAR_GBIF_bio.vect, Vestfold.covs.stk[[1]]) %>% as.data.frame(geom = "XY")
# bio_vestfold_sf <- terra::crop(SCAR_GBIF_bio.vect, Vestfold.covs.stk[[1]]) %>% st_as_sf()
# 
# bio_bunger_df <- terra::crop(SCAR_GBIF_bio.vect, Bunger.covs.stk[[1]]) %>% as.data.frame(geom = "XY")
# bio_bunger_sf <- terra::crop(SCAR_GBIF_bio.vect, Bunger.covs.stk[[1]]) %>% st_as_sf()


# bio_east_ant.no.Vestfold.df <- terra::mask(bio_east_ant, Vestfold.landsat, inverse = T) %>% as.data.frame(geom = "XY")
# bio_east_ant.no.Vestfold.sf <- terra::mask(bio_east_ant, Vestfold.landsat, inverse = T) %>% st_as_sf()

bio_east_ant <- terra::mask(SCAR_GBIF_bio.vect, ice_freeSPVE.EastAnt)

bio_east_ant.no.Bunger.df <- terra::mask(bio_east_ant, Bunger.landsat, inverse = T) %>% as.data.frame(geom = "XY")
bio_east_ant.no.Bunger.sf <- terra::mask(bio_east_ant, Bunger.landsat, inverse = T) %>% st_as_sf()


```

## Plotting distribution of records 

```{r}

# Load the Antarctic coastline for plotting
coast <- st_read(here("Data/add_coastline_high_res_polygon_v7_5.shp"), crs = 3031)

# Plot distribution of presence-only lichen records across East Antarctica
a <- ggplot() +
  geom_sf(data = coast, color = "black", size = 0.05) +
  geom_sf(data = ice_free, fill = "grey80", size = 0.05) +
  geom_sf(data = bio_east_ant_sf, aes(color = class)) +
  coord_sf(
    xlim = c(st_bbox(bio_east_ant.no.Bunger.df)$xmin, st_bbox(bio_east_ant.no.Bunger.df)$xmax), 
    ylim = c(st_bbox(bio_east_ant.no.Bunger.df)$ymin, st_bbox(bio_east_ant.no.Bunger.df)$ymax)) +
   scale_fill_manual(name = "", 
                    labels = element_blank(),
                    values = c("white", "grey92","grey92", "grey92")) +
  theme_bw() + 
  theme(legend.title = element_blank(),
        legend.key = element_blank(),
        legend.background = element_blank())

# Now just in Vestfold Hills
b <- ggplot() +
  geom_sf(data = coast, color = "black", size = 0.05) +
   geom_sf(data = ice_free, fill = "grey80", size = 0.05) +
  geom_sf(data = bio_east_ant_sf, aes(color = class)) +
  coord_sf(
    xlim = c(st_bbox(bio_vestfold_sf)$xmin, st_bbox(bio_vestfold_sf)$xmax), 
    ylim = c(st_bbox(bio_vestfold_sf)$ymin, st_bbox(bio_vestfold_sf)$ymax)) +
  scale_fill_manual(name = "", 
                    labels = element_blank(),
                    values = c("white", "grey92","grey92", "grey92")) +
  theme_bw() +
  theme(legend.title = element_blank(),
        legend.key = element_blank(),
        legend.background = element_blank())

# And in Bunger Hills
c <- ggplot() +
  geom_sf(data = coast, color = "black", size = 0.05) +
  geom_sf(data = ice_free, fill = "grey80", size = 0.05) +
  geom_sf(data = bio_east_ant_sf, aes(color = class)) +
  coord_sf(
    xlim = c(st_bbox(bio_bunger_sf)$xmin, st_bbox(bio_bunger_sf)$xmax), 
    ylim = c(st_bbox(bio_bunger_sf)$ymin, st_bbox(bio_bunger_sf)$ymax)) +
  scale_fill_manual(name = "", 
                    labels = element_blank(),
                    values = c("white", "grey92","grey92", "grey92")) +
  theme_bw() +
    theme(legend.title = element_blank(),
        legend.key = element_blank(),
        legend.background = element_blank())

PO_plot <- ggarrange(a , 
          ggarrange(b, c, nrow = 2, labels = c("(b)", "(c)")),
          labels = c("(a)", ""), ncol = 2, 
          common.legend = T)

# ggsave(plot = PO , filename = here("output/Locs_of_PO_data_East_Ant_plot.png"), w = 21.5, h = 21.2, units = "cm", dpi = 800, device = "png" )

```

## Summarising number of records for target groups across East Antarctica, in the Vestfold Hills and in the Bunger Hills

::: {.panel-tabset}

## East Antarctica

### TO DO - CHECK THAT MY TRIMMING OF BUNGER HASN'T REMOVED  TOO MANY RECORDS
But I think it's because I've masked by my ice-freeSPVE rather than the ACBR_SPVE

```{r}

count(bio_east_ant.no.Bunger.df, class)

```

## Vestfold Hills

```{r}

count(bio_vestfold_df, class)

```

## Bunger Hills

```{r}

count(bio_bunger_df, class)

```

:::

### Load the presence-absence data from Leishman et al. (2020)

Adjust Easting and Northing

```{r}

leishman <- read.csv(here("Data/leishman_data.csv"))
leishman$easting <- as.character(leishman$easting)
leishman$northing_new <- as.character(leishman$northing_new)

leishman <- leishman %>% mutate(easting_final = paste0("5", easting, "00"))
leishman <- leishman %>% mutate(northing_final = paste0("26", northing_new, "00"))

leishman$easting_final <- as.numeric(leishman$easting_final)
leishman$northing_final <- as.numeric(leishman$northing_final)

leishman_sf <- st_as_sf(leishman,
                        coords = c("easting_final", "northing_final"),
                        crs = 32747) # UTM Zone 47S

# Project to WGS 84 Antarctic Polar Stereographic
leishman_sf <- st_transform(leishman_sf, 3031) 

leishman_df <- leishman_sf %>% 
  st_coordinates() %>%
  as.data.frame() %>% 
  bind_cols(st_drop_geometry(leishman_sf)) %>% 
  rename(x = X, y = Y) 

leishman_plot <- ggplot() +
  geom_sf(data = coast, color = "black", size = 0.05) +
  geom_sf(data = ice_free, fill = "grey80", size = 0.05) +
  geom_sf(data = leishman_sf, aes(color = as.factor(presence))) +
  coord_sf(
    xlim = c(st_bbox(bio_bunger_sf)$xmin, st_bbox(bio_bunger_sf)$xmax),
    ylim = c(st_bbox(bio_bunger_sf)$ymin, st_bbox(bio_bunger_sf)$ymax)) +
  scale_fill_manual(name = "",
                    labels = element_blank(),
                    values = c("white", "grey92","grey92", "grey92")) +
  theme_classic() +
    theme(legend.title = element_blank(),
        legend.key = element_blank(),
        legend.background = element_blank())

leishman_plot

 ggsave(plot = leishman_plot , filename = here("output/Locs_of_PA_data_Bunger_plot.png"), w = 21.5, h = 21.2, units = "cm", dpi = 800, device = "png" )
```
### Load the presence-absence data from Travers et al. (2024)

```{r}

travers <- read.csv(here("Data/Travers_Vestfold_PA_Survey.csv"))

travers_sf <- st_as_sf(travers,
                        coords = c("x", "y"),
                        crs = 4326) # WGS 84 geographic coordinates

travers_sf <- st_transform(travers_sf, 3031) #project to WGS_1984 Antarctic Polar Stereographic

travers_df <- travers_sf %>% 
  st_coordinates() %>%
  as.data.frame() %>% 
  bind_cols(st_drop_geometry(travers_sf)) %>% 
  rename(x = X, y = Y) 

travers_plot <- ggplot() +
  geom_sf(data = coast, color = "black", size = 0.05) +
  geom_sf(data = ice_free, fill = "grey80", size = 0.05) +
  geom_sf(data = travers_sf, aes(color = as.factor(surface_moss))) +
  coord_sf(
    xlim = c(st_bbox(bio_vestfold_sf)$xmin, st_bbox(bio_vestfold_sf)$xmax),
    ylim = c(st_bbox(bio_vestfold_sf)$ymin, st_bbox(bio_vestfold_sf)$ymax)) +
  scale_fill_manual(name = "",
                    labels = element_blank(),
                    values = c("white", "grey92","grey92", "grey92")) +
  theme_classic() +
    theme(legend.title = element_blank(),
        legend.key = element_blank(),
        legend.background = element_blank())


travers_plot

# ggsave(plot = travers_plot , filename = here("output/Locs_of_PA_data_Vestfold_plot.png"), w = 21.5, h = 21.2, units = "cm", dpi = 800, device = "png" )

```

# Formatting for model preparation
Starting with lichens.
Starting with Vestfold to Bunger (BECAUSE MORE PO RECORDS AT VESTFOLD)

```{r}

PO <- bio_east_ant.no.Bunger.df %>% 
  filter(class == "Bryopsida") %>% 
  dplyr::select(x, y) 

PA_fit <- leishman_df %>% 
  filter(species == "Moss") %>% 
  dplyr::select(x, y, presence)
  
PA_val <- travers_df %>% 
  dplyr::select(x, y, surface_moss) %>% 
  rename(presence = surface_moss)

```

# Calculating extrapolation

```{r}

# Convert covarites to a dataframe
Bunger.covs.df <- as.data.frame(predictors.icefree.Bunger.crop, xy = T)
Vestfold.covs.df <- as.data.frame(predictors.icefree.Vestfold.crop, xy = T)

```

```{r}

library(flexsdm)

# Adding presence column due to extra_eval requirements
# Trimming so just the covariates
training <- Vestfold.covs.df %>% 
  mutate(Presence = 1) %>% 
  .[,c("elev", "slope", "aspect", "Presence")]

projection <- Bunger.covs.df %>% 
  .[,c("elev", "slope", "aspect")]


## NOTE - TAKES A WHILE
shape_extrap <- extra_eval(training_data = training,
                           pr_ab = "Presence",
                           projection_data = projection,
                           metric = "mahalanobis",
                           univar_comb = F)

shape_extrap <- cbind(shape_extrap, Bunger.covs.df[, c("x", "y")])

shape_extrap %>% 
  ggplot() + 
  geom_tile(aes(x = x, y = y, fill = extrapolation)) + 
  scale_fill_viridis() +
  coord_fixed() + 
  theme_bw() + 
  theme(axis.title.x = element_blank(),
        axis.title.y = element_blank(),
        legend.ticks = element_blank(),
        legend.title = element_blank()) +
  ggtitle('Extrapolation - Vestfold to Bunger')

```

```{r}

mean(shape_extrap$extrapolation, na.rm = T)
median(shape_extrap$extrapolation, na.rm = T)
min(shape_extrap$extrapolation, na.rm = T)
max(shape_extrap$extrapolation, na.rm = T)

```
### Plotting data in covariate space with extrapolation

```{r}

ggplot() + 
  geom_point(data = Bunger.covs.df, aes(x = elev, y = TWI), color = "grey") +
  geom_point(data = shape_extrap, aes(x = elev, y = TWI, color = extrapolation)) +
  scale_color_viridis(option = "magma", direction = -1) +
  theme_bw() +
  theme(legend.ticks = element_blank()) +
  ggtitle('Extrapolation Bunger to Vestfold - elev and TWI')

ggplot() + 
  geom_point(data = Bunger.covs.df, aes(x = TWI, y = wind), color = "grey") +
  geom_point(data = shape_extrap, aes(x = TWI, y = wind, color = extrapolation)) +
  scale_color_viridis(option = "magma", direction = -1) +
  theme_bw() +
  theme(legend.ticks = element_blank()) +
  ggtitle('Extrapolation Bunger to Vestfold - TWI and wind')

ggplot() +
  geom_point(data = Bunger.covs.df, aes(x = wind, y = summer_temp), color = "grey") +
  geom_point(data = shape_extrap, aes(x = wind, y = summer_temp, color = extrapolation)) +
  scale_color_viridis(option = "magma", direction = -1) +
  theme_bw() +
  theme(legend.ticks = element_blank()) +
  ggtitle('Extrapolation Bunger to Vestfold - wind and summer_temp')

ggplot() +
  geom_point(data = Bunger.covs.df, aes(x = summer_temp, y = northness), color = "grey") +
  geom_point(data = shape_extrap, aes(x = summer_temp, y = northness, color = extrapolation)) +
  scale_color_viridis(option = "magma", direction = -1) +
  theme_bw() +
  theme(legend.ticks = element_blank()) +
  ggtitle('Extrapolation Bunger to Vestfold - summer_temp and northness')

ggplot() +
  geom_point(data = Bunger.covs.df, aes(x = elev, y = wind), color = "grey") +
  geom_point(data = shape_extrap, aes(x = elev, y = wind, color = extrapolation)) +
  scale_color_viridis(option = "magma", direction = -1) +
  theme_bw() +
  theme(legend.ticks = element_blank()) +
  ggtitle('Extrapolation Bunger to Vestfold - elev and wind')


```




