---
title: "Prediction comparison simulated data"
author: "Charlotte Patterson & Xiaotian Zheng"
format: 
  html:
    embed-resources: true
---

```{r}
#| output: false

library(purrr)

packages <- c("sf", "terra", "ggpubr", "RISDM", "dplyr", "DescTools", "spatstat", "Metrics", "scoringutils", "viridis")

walk(packages, require, character.only = T)

wd <- getwd()

```

# Simulate covariates

```{r}


set.seed(42)

# First install NLMR
# remotes::install_github("ropensci/NLMR")
# install.packages("landscapetools")

library(NLMR)
library(landscapetools)
library(RandomFields) # Note that RandomFields is no longer on CRAN. Downloaded archived file.

cov1 <- nlm_gaussianfield(ncol = 100,
                          nrow = 100,
                          resolution = 0.01,
                          autocorr_range = 50, # Maximum range (raster units) of spatial autocorrelation
                          mag_var = 1, # Magnitude of variation over the landscape
                          nug = 0.01, # Magnitude of variation in the scale of the autocorr_range (smaller values = more homogenous)
                          mean = 0.5, # Mean value over the field
                          user_seed = 2L, # Set random seed for the simulation
                          rescale = T # If T, the values are rescaled between 0 and 1
) %>% 
  rast()

crs(cov1) <- "epsg:3857" # Setting to WGS 84 / Pseudo-Mercator projection for later functions requiring cell size

c1 <- cov1 %>% 
  as.data.frame(xy = T) %>%  
  ggplot() + 
  geom_tile(aes(x = x, y = y, fill = layer)) + 
  scale_fill_viridis() +
  coord_fixed() + 
  theme_bw() + 
  theme(axis.title.x = element_blank(),
        axis.title.y = element_blank(),
        legend.ticks = element_blank(),
        legend.title = element_blank()) +
  ggtitle('Covariate 1')

c1
```

Also set up resolution and north/east step length for later Site A and B grid creation.

```{r}


# Create a bounded domain on [0, 1] x [0, 1]

east_min <- 0
east_max <- 1
north_min <- 0
north_max <- 1

# We generate the grid resolution from min, max dimensions and the number of pixels

# Set number of pixels (100 x 100)
n_bau_east <- 100
n_bau_north <- 100
# so now we have n_bau_est x n_bau_north grid cells

# Obtain the cell resolution
bau_east_step <- (east_max - east_min) / n_bau_east
bau_north_step <- (north_max - north_min) / n_bau_north 

# Generate grid centroid coordinates
# We do this so that our centroid begins in the centre of a cell (hence, bau_east_step/2))

eastings <- seq(east_min + bau_east_step/2, east_max - bau_east_step/2, by = bau_east_step)
northings <- seq(north_min + bau_north_step/2, north_max - bau_north_step/2, by = bau_north_step)


```


# Simulate latent distribution

```{r}


# Set Parameters Data Generation ----------------------------------------------------------

beta0 <- 5 # Intercept
beta1 <- 0.5 # Coefficient for cov 1
# beta2 <- 0.1 # Coefficient for cov 2
# beta3 <- 5 # Coefficient for cov 1*2 interaction
var <- 1 # Variance of the Gaussian field (changed  from 0.5)  
scal <- 0.2 # Scale parameter 
# nu <- 1 # Smoothness parameter - ONLY FOR MATERN
seed <- 3L

# Mean of process dependent on spatially-varying covar

# Get coords of original raster
coords <- xyFromCell(cov1, 1:ncell(cov1))

# Convert raster to matrix object
cov1.mat <- terra::as.matrix(cov1, wide = T) 

cov1.mat2 <- cov1.mat %>% 
  reshape2::melt(c("x", "y"), value.name = "cov") 

GRF.cov1 <- cbind(x = coords[,1], y = coords[,2], cov = cov1.mat2["cov"]) 

# Can do with one or two covariates
fe <- beta0 + beta1*GRF.cov1[, "cov"]

mu <- data.frame(x = coords[,1], y = coords[, 2], z = fe)
mu <- spatstat.geom::as.im(mu, W = win)

plot(mu)


# Set seed 
set.seed(seed)

# Create LGCP with environmental covariate
lg.s <- rLGCP('exp', mu = mu,
              var=var, scale=scal)
plot(lg.s)

```

# PA sampling from two random grids
Currently assuming perfect detection. 

```{r}


spp_process <- cbind(x = lg.s$x, y = lg.s$y)

# For random covariate case
PO <- spp_process

#-------------------------------------------------------------------------------
# Select Random Grids
#-------------------------------------------------------------------------------

gridcov1.rast <- rast(GRF.cov1, type = "xyz") 

crs(gridcov1.rast) <- "epsg:3857" # Setting to WGS 84 / Pseudo-Mercator projection for later functions requiring cell size

# Set size of grid (number of cells) for Site A (Reference)
  # NOTE - must be smaller than total cell number in x y directions
  rast_cellsA <- c(30, 20)
  rast_sizeA <- c(rast_cellsA[1]*bau_east_step, rast_cellsA[2]*bau_north_step)
  # Set size of grid (number of cells) for Site B (Target)
  rast_cellsB <- c(30, 20)
  rast_sizeB <- c(rast_cellsB[1]*bau_east_step, rast_cellsB[2]*bau_north_step)
  
  # Get coords of overall grid domain boundary
  xmin <- min(eastings)
  xmax <- max(eastings)
  ymin <- min(northings)
  ymax <- max(northings)
  
  # Set the limit for x and y coord so box is completely inside the domain
  rand.limA <- c(xmax - rast_sizeA[1], ymax - rast_sizeA[2])
  rand.limB <- c(xmax - rast_sizeB[1], ymax - rast_sizeB[2])
  
  # Create random coordinate index for top corner of subgrid within grid domain
  # Do this by generating a random number and finding the nearest eastings/northings value
  # Then use this index on x0 to get the coordinate
  xmin.randA <- eastings[which.min(abs(eastings - runif(1, min = xmin, max = rand.limA[1])))]
  ymin.randA <- northings[which.min(abs(northings - runif(1, min = ymin, max = rand.limA[2])))]
  
  xmax.randA <- eastings[which.min(abs(eastings - (xmin.randA + rast_sizeA[1])))]
  ymax.randA <- northings[which.min(abs(northings - (ymin.randA + rast_sizeA[2])))]
  
  xmin.randB <- eastings[which.min(abs(eastings - (runif(1, min = xmin, max = rand.limB[1]))))]
  ymin.randB <- northings[which.min(abs(northings - (runif(1, min = ymin, max = rand.limB[2]))))]
  
  xmax.randB <- eastings[which.min(abs(eastings - (xmin.randB + rast_sizeB[1])))]
  ymax.randB <- northings[which.min(abs(northings - (ymin.randB + rast_sizeB[2])))]
  
  
  rand.gridA <- rast(xmin = xmin.randA, 
                     xmax = xmax.randA, 
                     ymin = ymin.randA, 
                     ymax = ymax.randA, 
                     nrows = rast_cellsA[1], 
                     ncols = rast_cellsA[2],
                     vals = 1:rast_sizeA[2]) # Just setting values for plotting and for converting to a dataframe
  
  rand.gridB <- rast(xmin = xmin.randB, 
                     xmax = xmax.randB, 
                     ymin = ymin.randB, 
                     ymax = ymax.randB, 
                     nrows = rast_cellsB[1], 
                     ncols = rast_cellsB[2],
                     vals = 1:rast_sizeB[2]) # Just setting values for plotting and for converting to a dataframe
  
  
  plot(gridcov1.rast)
  lines(ext(rand.gridA), lwd = 2, col = "red")
  lines(ext(rand.gridB), lwd = 2, col = "blue")

#-------------------------------------------------------------------------------
# Site A
#-------------------------------------------------------------------------------

# Get the domain of region a
dom_a_bbox <- c(east_min = xmin(rand.gridA), east_max = xmax(rand.gridA), north_min = ymin(rand.gridA), north_max = ymax(rand.gridA))

# Choose a grid size number of rows (for PA sampling)
PA_a_res <- 30
dom_a_res <- (dom_a_bbox["east_max"] - dom_a_bbox["east_min"]) / PA_a_res

# Set centroids of PA sampling grids
east_seq <- seq(dom_a_bbox["east_min"] + dom_a_res/2, 
                dom_a_bbox["east_max"] - dom_a_res/2, 
                by = dom_a_res)
north_seq <- seq(dom_a_bbox["north_min"] + dom_a_res/2, 
                 dom_a_bbox["north_max"] - dom_a_res/2, 
                 by = dom_a_res)


# Create a blank PA dataset at Site A (all zeros), located on grids cells defined by random grid domain and our PA sampling grid size
grid_a <- expand.grid(east_seq, north_seq)
pa_a <- cbind(grid_a, 0)
colnames(pa_a) <- c("x", "y", "presence")
pa_a <- terra::rast(pa_a)

# find species coordinates from underlying LGCP that are in region a
inbox_idx_a <- which(spp_process[, "x"] >= dom_a_bbox["east_min"] &
                       spp_process[, "x"] <= dom_a_bbox["east_max"] & 
                       spp_process[, "y"] >= dom_a_bbox["north_min"] &
                       spp_process[, "y"] <= dom_a_bbox["north_max"])


po_a <- spp_process[inbox_idx_a, ]
po_a_df <- as.data.frame(po_a)

# Now assuming perfect detection
po_a_df$presence <- 1

# Get cell indices of the species coordinates
cell_idx <- terra::cellFromXY(pa_a, po_a_df[, c("x", "y")])

# Fill in the raster with 1 from the cell indices
pres_idx <- as.numeric(names(table(cell_idx)))
pa_a[pres_idx] <- 1

# plot the data
plot(pa_a)

#-------------------------------------------------------------------------------
# Site B
#-------------------------------------------------------------------------------

# Get the domain of region a
dom_b_bbox <- c(east_min = xmin(rand.gridB), east_max = xmax(rand.gridB), north_min = ymin(rand.gridB), north_max = ymax(rand.gridB))

# Choose a grid size (for PA sampling)
PA_b_res <- 30
dom_b_res <- (dom_b_bbox["east_max"] - dom_b_bbox["east_min"]) / PA_b_res

# Set centroids of PA sampling grids
east_seq <- seq(dom_b_bbox["east_min"] + dom_b_res/2, 
                dom_b_bbox["east_max"] - dom_b_res/2, 
                by = dom_b_res)
north_seq <- seq(dom_b_bbox["north_min"] + dom_b_res/2, 
                 dom_b_bbox["north_max"] - dom_b_res/2, 
                 by = dom_b_res)


# Create a blank PA dataset at Site B (all zeros), located on grids cells defined by random grid domain and our PA sampling grid size
grid_b <- expand.grid(east_seq, north_seq)
pa_b <- cbind(grid_b, 0)
colnames(pa_b) <- c("x", "y", "presence")
pa_b <- terra::rast(pa_b)

# find species coordinates from underlying LGCP that are in region a
inbox_idx_b <- which(spp_process[, "x"] >= dom_b_bbox["east_min"] &
                       spp_process[, "x"] <= dom_b_bbox["east_max"] & 
                       spp_process[, "y"] >= dom_b_bbox["north_min"] &
                       spp_process[, "y"] <= dom_b_bbox["north_max"])


po_b <- spp_process[inbox_idx_b, ]
po_b_df <- as.data.frame(po_b)

# Now assuming perfect detection
po_b_df$presence <- 1

# Get cell indices of the species coordinates
cell_idx <- terra::cellFromXY(pa_b, po_b_df[, c("x", "y")])

# Fill in the raster with 1 from the cell indices
pres_idx <- as.numeric(names(table(cell_idx)))
pa_b[pres_idx] <- 1

# plot the data
plot(pa_b)

# pa - region a
pa_a_df <- as.data.frame(pa_a, xy = TRUE)

# pa - region b
pa_b_df <- as.data.frame(pa_b, xy = TRUE)


#-------------------------------------------------------------------------------
# Plot the site with all data types
#-------------------------------------------------------------------------------

ggplot() +
  # geom_tile(data = bias.df, aes(x = x, y = y), fill = "white") +
  scale_fill_viridis() +
  geom_point(data = PO, aes(x = x, y = y), color = "black", alpha = 0.1) +
  geom_point(data = pa_a_df, aes(x = x, y = y, color = as.factor(presence)), size = 2) +
  geom_point(data = pa_b_df, aes(x = x, y = y, color = as.factor(presence)), size = 2) +
  labs(color =  "Presence / Absence") +
  theme_bw() +
  theme(legend.ticks = element_blank()) +
  scale_color_manual(values = c("purple4", "green3"))

```

# Model fitting

```{r}


# Covariates
cov <- gridcov1.rast

names(cov) <- c("cov1")

# Add sampling area to PA

PA_fit <- pa_a_df
PA_fit <- PA_fit %>% mutate(area = 0.02)

PA_val <- pa_b_df
PA_val <- PA_val %>% mutate(area = 0.02)

# Mesh default ------------------------------------------------------------

mesh.default <- makeMesh(cov,
                         max.n = c(5000, 2500), # Default c(500,200)
                         dep.range = NULL, # In raster projection units, default is 1/3 diagonal length of raster extent
                         expans.mult = 1.5, # Default, 1.5 x dep.range
                         max.edge = NULL, # Default c(0.2, 0.5)*dep.range
                         cutoff = NULL, # Default 0.2*max.edge1
                         offset = NULL, # Default is dep.range
                         doPlot = TRUE
)


# Model specification -----------------------------------------------------

# Priors
my.control <- list(coord.names = c("x", "y"),
                   prior.mean = 0,
                   int.sd = 1000, # Intercept standard deviation
                   other.sd = 10, # Covariate effect standard deviation
                   prior.range = c(1, 0.1), # Prior chance 10% that parameter falls below range of 1km
                   prior.space.sigma = c(5, 0.1)) # Prior chance 10% that parameter falls above SD of 5


# Integrated Model Fitting

m.int <- isdm(observationList = list(POdat = PO,
                                         PAdat = PA_fit),
                  covars = cov,
                  mesh = mesh.default,
                  responseNames = c(PO = NULL, PA = "presence"),
                  sampleAreaNames = c(PO = NULL, PA = "area"),
                  distributionFormula = ~0 + cov1, # Linear w one cov
                  biasFormula = ~1, #Intercept only
                  artefactFormulas = list(PA = ~1), # Intercept only
                  control = my.control)
    
    
    
# Presence-Only Model Fitting

m.PO <- isdm(observationList = list(POdat = PO), 
                  covars = cov,
                  mesh = mesh.default,
                  responseNames = NULL,
                  sampleAreaNames = NULL,
                  distributionFormula = ~0 + cov1, # Linear w one cov
                  biasFormula = ~1, #Intercept only
                  artefactFormulas = NULL,
                  control = my.control)
    

```

## Stack Models as a List

```{r}


mod.list <- list(integrated = m.int,
                 PO = m.PO)

```

## Model diagnostics

Diagnostic table.

```{r}


map(mod.list, function(x) {summary(x)})


```

## Residual Plots

```{r}


map(mod.list, function(x) {
  
  plot(x, nFigRow = 2, ask = FALSE)
  
})


```

## Plotting true intensity

```{r}


# True intensity
Lam <- attr(lg.s, "Lambda")

# Get the (v) log intensity values (expected number of points per unit area)
true_log_int <- log(Lam$v) 

# Reverse the row order
true_log_int <- apply(true_log_int, 2, rev)

# Transpose the matrix to match the raster layout
true_log_int <- t(true_log_int)

# Melt into xy dataframe
true_log_int.melt <- true_log_int %>% 
  reshape2::melt(c("x", "y"), value.name = "int") 

# Create a raster  
true_log_int.rast <- cbind(x = coords[,1], y = coords[,2], true.int = true_log_int.melt["int"]) %>% rast(.)

# Plot the true log intensity
plot(true_log_int.rast)


```


## Prediction

```{r}


# Run for intensity prediction first
for(i in 1:length(mod.list)) {
  
  mod.list[[i]]$preds <- predict(mod.list[[i]],
                               covars = cov,
                               S = 500, 
                               intercept.terms = "PO_Intercept",
                               type = "intensity")
                             
                          
  plot(mod.list[[i]]$preds$field[[1:3]], nc = 3)                           
   
}


```

Now on log-link scale. 

```{r}


for(i in 1:length(mod.list)) {
  
 mod.list[[i]]$preds.probs <- predict(mod.list[[i]],
                                     covars = cov,
                                     S = 500, 
                                     intercept.terms = "PO_Intercept", 
                                     type = "link")
                             
                          
  plot(mod.list[[i]]$preds.probs$field[[1:3]], nc = 3)                           
   

}


```


## Now running prediction with Xiaotian Zheng code

```{r}


#-------------------------------------------------------------------------------
# Posterior prediction
#-------------------------------------------------------------------------------

library(INLA)
GRF.cov1.mat <- as.matrix(GRF.cov1)


# Construct a prediction weight matrix
A_pred <- inla.spde.make.A(mesh = mesh.default, loc = GRF.cov1.mat[,1:2])

# Get posterior samples from isdm_out
nsam <- 5000
isdm_post_sam <- inla.posterior.sample(nsam, mod.list[[1]]$mod, add.names = FALSE)

var_names <- rownames(isdm_post_sam[[1]]$latent)

var_idx <- lapply(c('PO_Intercept', 'cov1', 'isdm.spat'), function(nam) 
  which(substr(var_names, 1, nchar(nam)) == nam)) 

isdm_mat_sam <- sapply(isdm_post_sam, function(iter)
  c(PO_Intercept = iter$latent[var_idx[[1]]], 
    covar = iter$latent[var_idx[[2]]], 
    isdm_spat = iter$latent[var_idx[[3]]]))

# Get posterior samples from po_out
po_post_sam <- inla.posterior.sample(nsam, mod.list[[2]]$mod, add.names = FALSE)

var_names <- rownames(po_post_sam[[1]]$latent)

var_idx <- lapply(c('PO_Intercept', 'cov1', 'isdm.spat'), function(nam) 
  which(substr(var_names, 1, nchar(nam)) == nam)) 

po_mat_sam <- sapply(po_post_sam, function(iter)
  c(PO_Intercept = iter$latent[var_idx[[1]]], 
    covar = iter$latent[var_idx[[2]]], 
    isdm_spat = iter$latent[var_idx[[3]]]))


# Get posterior samples of the log intensity
isdm_mu_sam <- as.matrix(cbind(1, GRF.cov1.mat[, 3], A_pred)) %*% isdm_mat_sam
po_mu_sam <- as.matrix(cbind(1, GRF.cov1.mat[, 3], A_pred)) %*% po_mat_sam

# Get posterior mean
pred_log_int <- data.frame(x = GRF.cov1.mat[,1], y = GRF.cov1.mat[,2], 
                           isdm = rowMeans(isdm_mu_sam),
                           po = rowMeans(po_mu_sam))
                           
pred_log_int_ras <- rast(pred_log_int, type = "xyz")

plot(pred_log_int_ras)

```
